import React, { useState, useRef, useEffect } from 'react';
import * as pdfjsLib from 'pdfjs-dist';
import { createWorker } from 'tesseract.js';

// 设置PDF.js worker
// 使用本地worker文件，避免网络依赖问题
const workerSrc = `${process.env.PUBLIC_URL}/pdf.worker.min.js`;
pdfjsLib.GlobalWorkerOptions.workerSrc = workerSrc;
console.log('PDF.js worker路径设置为:', workerSrc);

const PdfTestPage = () => {
  const fileInputRef = useRef(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [uploadError, setUploadError] = useState('');
  const [pdfInfo, setPdfInfo] = useState({
    fileName: '',
    previewUrls: [],
    currentPage: 1,
    pageCount: 0,
    extractedText: '',
    textByPage: [],
    parsedData: null,
    processingTime: 0,
    textExtractionSuccess: false,
    hasImages: false,
    ocrProcessing: false,
    ocrProgress: 0,
    ocrComplete: false
  });
  
  // 创建Tesseract OCR Worker
  const [ocrWorker, setOcrWorker] = useState(null);
  
  // 初始化OCR Worker
  useEffect(() => {
    const initWorker = async () => {
      try {
        console.log('开始初始化OCR Worker...');
        // 创建Worker时不传递logger函数，而是使用事件监听器
        const worker = await createWorker({
          // 指定语言数据位置，避免下载延迟
          langPath: `${process.env.PUBLIC_URL}/tessdata`,
          // 缓存路径
          cachePath: `${process.env.PUBLIC_URL}/tessdata_cache`,
          // 内存限制
          workerBlobURL: false
        });
        
        // 监听Worker的进度事件
        worker.progress(progress => {
          console.log('OCR进度:', progress);
          if (progress.status === 'recognizing text') {
            setPdfInfo(prev => ({
              ...prev,
              ocrProgress: Math.round(progress.progress * 100)
            }));
          }
        });
        
        console.log('开始加载语言数据...');
        // 加载语言数据，仅使用英文来加快加载速度
        await worker.loadLanguage('eng');
        await worker.initialize('eng');
        console.log('语言数据加载完成');
        
        // 设置OCR参数，提高识别质量和速度
        await worker.setParameters({
          tessedit_ocr_engine_mode: 3, // 使用神经网络引擎
          tessedit_pageseg_mode: 1,   // 自动页面分割，更适合扫描文档
          tessjs_create_hocr: '0',   // 不创建HOCR
          tessjs_create_tsv: '0',    // 不创建TSV
          tessjs_create_box: '0',    // 不创建Box
          tessjs_create_unlv: '0',   // 不创建UNLV
          tessjs_create_osd: '0',    // 不创建OSD
          tessjs_create_pdf: '0',    // 不创建PDF
          // 优化速度的参数
          tessedit_do_invert: '0',   // 不进行颜色反转
          textord_heavy_nr: '1',     // 快速处理
          textord_force_make_prop_words: '0', // 加快处理
          tessedit_write_images: '0' // 不写入图像
        });
        setOcrWorker(worker);
        console.log('OCR Worker初始化完成');
      } catch (error) {
        console.error('初始化OCR Worker失败:', error);
      }
    };
    
    initWorker();
    
    // 组件卸载时终止Worker
    return () => {
      if (ocrWorker) {
        ocrWorker.terminate();
      }
    };
  }, []);

  // 生成PDF预览图像（所有页面）
  const generatePdfPreview = (file) => {
    return new Promise((resolve, reject) => {
      const fileReader = new FileReader();
      
      fileReader.onload = async (event) => {
        try {
          const arrayBuffer = event.target.result;
          
          // 使用PDF.js打开PDF文件
          const loadingTask = pdfjsLib.getDocument({
            data: new Uint8Array(arrayBuffer),
            disableFontFace: false
          });
          
          const pdf = await loadingTask.promise;
          const totalPages = pdf.numPages;
          console.log(`PDF总页数: ${totalPages}`);
          
          // 预先生成所有页面的预览
          const previewUrls = [];
          
          // 生成所有页面的预览
          for (let i = 1; i <= totalPages; i++) {
            const page = await pdf.getPage(i);
            
            // 设置渲染参数
            const viewport = page.getViewport({ scale: 1.5 }); // 缩放比例可以调整
            const canvas = document.createElement('canvas');
            const context = canvas.getContext('2d');
            canvas.height = viewport.height;
            canvas.width = viewport.width;
            
            // 渲染PDF页面到canvas
            await page.render({
              canvasContext: context,
              viewport: viewport
            }).promise;
            
            // 将canvas转换为图片URL
            const previewUrl = canvas.toDataURL('image/jpeg', 0.8); // 使用JPEG格式，质量0.8
            previewUrls.push(previewUrl);
            console.log(`生成第${i}页预览图像`);
          }
          
          resolve(previewUrls);
          
        } catch (error) {
          console.error('生成PDF预览时出错:', error);
          reject(error);
        }
      };
      
      fileReader.onerror = (error) => {
        console.error('读取文件时出错:', error);
        reject(error);
      };
      
      fileReader.readAsArrayBuffer(file);
    });
  };
  
  // 切换预览页面
  const changePage = (newPage) => {
    if (newPage >= 1 && newPage <= pdfInfo.pageCount) {
      setPdfInfo(prev => ({
        ...prev,
        currentPage: newPage
      }));
    }
  };
  
  // 切换文本显示模式（当前页/全部）
  const [showAllText, setShowAllText] = useState(false);
  
  const toggleTextDisplayMode = () => {
    setShowAllText(!showAllText);
  };

  // 处理文件上传
  const handleFileUpload = async (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    // 显示文件信息
    console.log('选择了文件:', file.name, file.type, file.size);
    
    // 检查是否为PDF文件
    if (file.type !== 'application/pdf') {
      setUploadError('请上传PDF文件');
      return;
    }
    
    // 设置处理状态
    setIsProcessing(true);
    setUploadError('');
    const startTime = performance.now();
    
    // 初始化一个基本的pdfInfo，让用户知道文件已经上传成功
    setPdfInfo({
      fileName: file.name,
      previewUrls: [],
      currentPage: 1,
      pageCount: '正在计算...',
      extractedText: '正在提取文本...',
      parsedData: null,
      processingTime: '正在处理...'
    });
    
    // 生成PDF预览图
    generatePdfPreview(file).then(previewUrls => {
      setPdfInfo(prev => ({
        ...prev,
        previewUrls,
        pageCount: previewUrls.length // 设置正确的页数
      }));
    }).catch(error => {
      console.error('生成PDF预览失败:', error);
    });
    
    try {
      // 获取PDF页数 - 这部分现在主要由generatePdfPreview处理
      // 但我们保留这个逻辑作为备份，以防预览生成失败
      try {
        const pageCount = await getPdfPageCount(file);
        setPdfInfo(prev => ({
          ...prev,
          pageCount: prev.pageCount === '正在计算...' ? pageCount : prev.pageCount
        }));
      } catch (error) {
        console.error('获取PDF页数失败:', error);
        setPdfInfo(prev => ({
          ...prev,
          pageCount: prev.pageCount === '正在计算...' ? '未知' : prev.pageCount
        }));
      }  
      // 提取PDF文本
      console.log('开始提取PDF文本...');
      const extractionResult = await extractTextFromPDF(file);
      const extractedText = extractionResult.fullText;
      const textByPage = extractionResult.textByPage;
      const textExtractionSuccess = extractionResult.success || false;
      const needsOcr = extractionResult.needsOcr || false;
      console.log('提取到的文本长度:', extractedText.length);
      console.log('按页面分割的文本数量:', textByPage.length);
      console.log('文本提取成功状态:', textExtractionSuccess);
      console.log('是否需要OCR:', needsOcr);
      
      // 如果提取失败且需要OCR，且OCR Worker已初始化，则尝试OCR处理
      if (!textExtractionSuccess && needsOcr && ocrWorker) {
        console.log('开始使用OCR处理PDF...');
        setPdfInfo(prev => ({
          ...prev,
          ocrProcessing: true,
          ocrProgress: 0
        }));
        
        try {
          // 使用第一页预览图进行OCR处理
          if (pdfInfo.previewUrls && pdfInfo.previewUrls.length > 0) {
            // 初始化为空数组，确保是数组类型
            let ocrResults = [];
            const totalPages = pdfInfo.previewUrls.length;
            let allOcrText = '';
            
            // 限制处理页数，如果页数过多，只处理前几页
            const pagesToProcess = Math.min(totalPages, 3); // 最多处理前3页，加快速度
            console.log(`将处理${pagesToProcess}页（共${totalPages}页）`);
            
            // 逐页OCR处理
            for (let i = 0; i < pagesToProcess; i++) {
              setPdfInfo(prev => ({
                ...prev,
                ocrProgress: Math.round((i / pagesToProcess) * 100)
              }));
              
              console.log(`OCR处理第${i+1}页，共${pagesToProcess}页...`);
              
              try {
                // 预处理图像，提高OCR质量
                const imageUrl = pdfInfo.previewUrls[i];
                
                // 使用更高级的识别选项
                console.log(`开始识别第${i+1}页...`);
                const { data: { text, confidence } } = await ocrWorker.recognize(imageUrl);
                
                console.log(`第${i+1}页OCR识别结果，置信度: ${confidence}%，文本长度: ${text.length}`);
                
                // 清理识别结果
                let cleanedText = text
                  .replace(/\s{2,}/g, ' ')  // 将多个空白字符合并为一个
                  .replace(/\n\s+/g, '\n')  // 删除行首空白
                  .trim();
                
                ocrResults.push(cleanedText);
                allOcrText += cleanedText + '\n\n';
                
                // 如果识别结果很短或置信度低，尝试再次识别使用不同的参数
                if (text.length < 50 || confidence < 70) {
                  console.log(`第${i+1}页识别结果不理想，尝试使用不同参数重新识别...`);
                  
                  // 尝试不同的分割模式
                  await ocrWorker.setParameters({ 
                    tessedit_pageseg_mode: 4, // 假设单列可变大小文本
                    textord_tabfind_find_tables: '0' // 不寻找表格，加快处理
                  });
                  
                  console.log(`使用新参数重新识别第${i+1}页...`);
                  const { data: { text: retryText, confidence: retryConfidence } } = await ocrWorker.recognize(imageUrl);
                  
                  console.log(`重新识别结果 - 置信度: ${retryConfidence}%, 文本长度: ${retryText.length}`);
                  
                  // 如果重新识别的结果更好，则使用新结果
                  if (retryText.length > text.length || retryConfidence > confidence) {
                    console.log(`重新识别成功，获取到更好的结果`);
                    
                    // 清理重新识别的文本
                    let cleanedRetryText = retryText
                      .replace(/\s{2,}/g, ' ')
                      .replace(/\n\s+/g, '\n')
                      .trim();
                    
                    ocrResults[i] = cleanedRetryText;
                    
                    // 重新构建allOcrText
                    allOcrText = '';
                    for (const pageText of ocrResults) {
                      allOcrText += pageText + '\n\n';
                    }
                  }
                  
                  // 恢复原始参数
                  await ocrWorker.setParameters({ 
                    tessedit_pageseg_mode: 1,
                    textord_tabfind_find_tables: '1'
                  });
                }
              } catch (pageError) {
                console.error(`OCR处理第${i+1}页时出错:`, pageError);
                ocrResults.push(`[无法识别第${i+1}页文本]`);
              }
            }
            
            // 如果还有更多页面未处理，添加提示
            if (pagesToProcess < totalPages) {
              ocrResults.push(`[仅处理了前${pagesToProcess}页，共${totalPages}页]`);
              allOcrText += `\n\n[仅处理了前${pagesToProcess}页，共${totalPages}页]`;
            }
            
            console.log('OCR处理完成，文本长度:', allOcrText.length);
            
            // 清理和格式化OCR提取的文本
            allOcrText = allOcrText
              .replace(/\s{2,}/g, ' ')  // 将多个空白字符合并为一个
              .replace(/\n\s+/g, '\n')  // 删除行首空白
              .replace(/\n{3,}/g, '\n\n')  // 限制连续空行
              .trim();
            
            // 确保ocrResults是数组
            if (!Array.isArray(ocrResults)) {
              console.warn('ocrResults不是数组，创建新数组');
              ocrResults = [allOcrText];
            }
            
            // 更新提取的文本
            const updatedExtractionResult = {
              fullText: allOcrText,
              textByPage: ocrResults,
              success: allOcrText.length > 50, // 如果OCR提取的文本足够长，则视为成功
              hasImages: true,
              ocrProcessed: true
            };
            
            console.log('最终OCR提取文本长度:', allOcrText.length);
            if (allOcrText.length > 0) {
              console.log('文本样本:', allOcrText.substring(0, 200));
            }
            
            // 分析OCR提取的文本
            let ocrParsedData = null;
            if (updatedExtractionResult.success) {
              console.log('开始分析OCR提取的文本...');
              ocrParsedData = analyzeResumeText(allOcrText);
              console.log('OCR文本分析结果:', ocrParsedData);
            }
            
            // 确保textByPage始终是数组
            const textByPageArray = Array.isArray(ocrResults) ? ocrResults : [allOcrText];
            
            // 更新状态
            setPdfInfo(prev => ({
              ...prev,
              extractedText: allOcrText,
              textByPage: textByPageArray,
              textExtractionSuccess: updatedExtractionResult.success,
              parsedData: ocrParsedData,
              ocrProcessing: false,
              ocrComplete: true
            }));
            
            // 返回OCR处理后的结果
            return;
          } else {
            console.error('没有可用的预览图进行OCR处理');
          }
        } catch (error) {
          console.error('OCR处理失败:', error);
          setPdfInfo(prev => ({
            ...prev,
            ocrProcessing: false,
            ocrComplete: true
          }));
        }
      }
      
      // 分析提取的文本（只在成功提取到足够文本时进行）
      let parsedData = null;
      if (textExtractionSuccess) {
        console.log('开始分析文本...');
        parsedData = analyzeResumeText(extractedText);
        console.log('分析结果:', parsedData);
      } else {
        console.log('文本提取失败或文本量不足，跳过分析步骤');
      }
      // 设置最终的处理结果
      const endTime = performance.now();
      const processingTime = ((endTime - startTime) / 1000).toFixed(2);
      
      // 如果没有通过OCR更新状态，则在这里更新
      if (!needsOcr || !ocrWorker) {
        setPdfInfo(prev => ({
          ...prev,
          extractedText: extractedText,
          textByPage: textByPage,
          parsedData: parsedData,
          processingTime,
          textExtractionSuccess: textExtractionSuccess,
          hasImages: extractionResult.hasImages,
          // 确保页数已正确设置（如果之前没有设置）
          pageCount: typeof prev.pageCount === 'string' && prev.previewUrls.length > 0 ? prev.previewUrls.length : prev.pageCount
        }));
      }
      
      console.log('处理完成，设置结果:', {
        fileName: file.name,
        pageCount: typeof pdfInfo.pageCount === 'string' && pdfInfo.previewUrls ? pdfInfo.previewUrls.length : pdfInfo.pageCount,
        extractedTextLength: extractedText.length,
        processingTime
      });
      
      // 检查解析后的数据
      console.log('解析后的数据详情:', JSON.stringify(parsedData, null, 2));
      
      // 如果提取的文本很少，显示警告
      if (extractedText.length < 100) {
        setUploadError('警告: 提取的文本内容很少，可能是扫描的PDF或加密的PDF。');
      }
    } catch (error) {
      console.error('处理PDF文件时出错:', error);
      setUploadError(error.message || '处理PDF文件时出错，请重试');
      
      // 即使出错也更新状态，让用户知道发生了什么
      setPdfInfo(prev => ({
        ...prev,
        extractedText: `错误: ${error.message || '处理PDF文件时出错'}`
      }));
    } finally {
      setIsProcessing(false);
      // 重置文件输入，以便可以再次上传同一文件
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    }
  };
  
  // 获取PDF页数
  const getPdfPageCount = (file) => {
    return new Promise((resolve, reject) => {
      const fileReader = new FileReader();
      
      fileReader.onload = async (event) => {
        try {
          console.log('文件读取成功，开始获取页数...');
          const arrayBuffer = event.target.result;
          console.log('数据长度:', arrayBuffer.byteLength);
          
          // 使用最简单的配置打开PDF
          const loadingTask = pdfjsLib.getDocument({
            data: new Uint8Array(arrayBuffer)
          });
          
          console.log('等待PDF加载完成...');
          const pdf = await loadingTask.promise;
          console.log('成功打开PDF文件，页数:', pdf.numPages);
          resolve(pdf.numPages);
        } catch (error) {
          console.error('获取PDF页数时出错:', error);
          reject(error);
        }
      };
      
      fileReader.onerror = (error) => {
        console.error('读取文件时出错:', error);
        reject(error);
      };
      
      console.log('开始读取文件...');
      fileReader.readAsArrayBuffer(file);
    });
  };
  
  // 从 PDF 提取文本 - 使用 pdfjs-dist 库
  const extractTextFromPDF = (file) => {
    return new Promise((resolve, reject) => {
      const fileReader = new FileReader();
      
      fileReader.onload = async (event) => {
        try {
          const arrayBuffer = event.target.result;
          
          // 使用PDF.js打开PDF文件，启用高级选项
          const loadingTask = pdfjsLib.getDocument({
            data: new Uint8Array(arrayBuffer),
            disableFontFace: false,  // 启用字体加载以提高文本提取质量
            ignoreErrors: true,      // 忽略非致命错误
            cMapUrl: `${process.env.PUBLIC_URL}/cmaps/`, // 添加cMap支持以提高多语言支持
            cMapPacked: true,
            standardFontDataUrl: `${process.env.PUBLIC_URL}/standard_fonts/` // 标准字体支持
          });
          
          console.log('等待PDF加载完成...');
          const pdf = await loadingTask.promise;
          console.log('成功打开PDF文件，页数:', pdf.numPages);
          
          // 逐页提取文本
          let allText = '';
          let textByPage = [];
          
          for (let i = 1; i <= pdf.numPages; i++) {
            try {
              console.log(`处理第${i}页...`);
              const page = await pdf.getPage(i);
              
              // 获取页面的文本内容
              const textContent = await page.getTextContent({
                normalizeWhitespace: true, // 规范化空白字符
                disableCombineTextItems: false // 允许合并相邻的文本项
              });
              
              // 打印文本项的统计信息
              console.log(`第${i}页文本项数量: ${textContent.items.length}`);
              
              // 使用更高级的文本提取逻辑
              // 保留文本项的位置信息以便更好地重建文本布局
              const textItems = textContent.items.map(item => ({
                text: item.str,
                x: item.transform[4], // x坐标
                y: item.transform[5], // y坐标
                width: item.width,
                height: item.height,
                fontName: item.fontName
              }));
              
              // 按行分组文本项（基于y坐标的相似性）
              const lineHeight = 5; // 允许的行高度误差
              let lines = [];
              let currentLine = [];
              
              // 按y坐标排序（从顶部到底部）
              const sortedItems = [...textItems].sort((a, b) => b.y - a.y);
              
              if (sortedItems.length > 0) {
                currentLine = [sortedItems[0]];
                
                for (let j = 1; j < sortedItems.length; j++) {
                  const currentItem = sortedItems[j];
                  const prevItem = currentLine[currentLine.length - 1];
                  
                  // 如果y坐标相近，认为是同一行
                  if (Math.abs(currentItem.y - prevItem.y) < lineHeight) {
                    currentLine.push(currentItem);
                  } else {
                    // 按x坐标排序当前行
                    currentLine.sort((a, b) => a.x - b.x);
                    lines.push(currentLine);
                    currentLine = [currentItem];
                  }
                }
                
                // 添加最后一行
                if (currentLine.length > 0) {
                  currentLine.sort((a, b) => a.x - b.x);
                  lines.push(currentLine);
                }
              }
              
              // 将行转换为文本
              const pageText = lines.map(line => 
                line.map(item => item.text).join(' ')
              ).join('\n');
              
              // 存储每页的文本
              textByPage.push(pageText);
              allText += pageText + '\n\n';
              
              console.log(`第${i}页文本提取完成，长度: ${pageText.length}`);
              if (pageText.length > 0) {
                console.log('页面文本样本:', pageText.substring(0, 100) + '...');
              }
              
            } catch (pageError) {
              console.error(`处理第${i}页时出错:`, pageError);
              textByPage.push(`[无法提取第${i}页文本: ${pageError.message}]`);
            }
          }
          
          // 清理和格式化最终文本
          allText = allText
            .replace(/\s{2,}/g, ' ')  // 将多个空白字符合并为一个
            .replace(/\n\s+/g, '\n')  // 删除行首空白
            .replace(/\n{3,}/g, '\n\n')  // 限制连续空行
            .trim();
          
          console.log('提取完成，总文本长度:', allText.length);
          
          // 检查提取的文本是否有效
          const isTextValid = allText.length > 50; // 如果文本少于50个字符，可能是提取失败
          
          if (isTextValid) {
            console.log('提取的文本前200个字符:', allText.substring(0, 200));
            
            // 返回包含全文本和分页文本的对象
            resolve({
              fullText: allText,
              textByPage: textByPage,
              success: true
            });
          } else {
            console.warn('提取的文本数量过少，可能是扫描的PDF');
            
            // 尝试检查是否有图像内容
            let hasImages = false;
            for (let i = 1; i <= pdf.numPages; i++) {
              try {
                const page = await pdf.getPage(i);
                const operatorList = await page.getOperatorList();
                // 检查是否有图像操作符
                if (operatorList.fnArray.some(op => op === pdfjsLib.OPS.paintImageXObject || op === pdfjsLib.OPS.paintImageMaskXObject)) {
                  hasImages = true;
                  break;
                }
              } catch (e) {
                console.error('检查图像时出错:', e);
              }
            }
            
            // 如果检测到图像，我们会在后续使用OCR处理，但这里仍然返回初始错误信息
            const errorMessage = hasImages 
              ? '该PDF文件似乎是扫描件或图像形式的PDF，无法直接提取文本。正在尝试使用OCR识别...' 
              : '无法从该PDF文件中提取文本。可能是加密的PDF文件或使用了特殊字体。';
            
            resolve({
              fullText: errorMessage,
              textByPage: [errorMessage],
              success: false,
              hasImages: hasImages,
              needsOcr: hasImages // 标记是否需要OCR处理
            });
          }
        } catch (error) {
          console.error('使用PDF.js提取文本时出错:', error);
          reject(new Error(`无法提取PDF文本: ${error.message}`));
        }
      };
      
      fileReader.onerror = (error) => {
        console.error('读取文件时出错:', error);
        reject(new Error('读取文件失败'));
      };
      
      fileReader.readAsArrayBuffer(file);
    });
  };
  
  // 分析简历文本并提取关键信息
  const analyzeResumeText = (text) => {
    console.log('开始分析简历文本...');
    
    // 清理文本
    const cleanText = text.replace(/\s+/g, ' ').trim();
    const lines = text.split(/[\r\n]+/).map(line => line.trim()).filter(line => line);
    
    // 初始化结果对象
    const result = {
      name: '',
      title: '',
      contact: {
        email: '',
        phone: '',
        website: '',
        github: ''
      },
      skills: []
    };
    
    // 尝试提取姓名（通常是文档的第一行或第二行）
    if (lines.length > 0) {
      // 检查第一行是否看起来像姓名（短且不包含特殊字符）
      const firstLine = lines[0];
      if (firstLine.length < 30 && !/[@:\/\(\)]/.test(firstLine)) {
        result.name = firstLine;
      } else if (lines.length > 1) {
        // 尝试第二行
        const secondLine = lines[1];
        if (secondLine.length < 30 && !/[@:\/\(\)]/.test(secondLine)) {
          result.name = secondLine;
        }
      }
    }
    
    // 尝试提取职位（通常在姓名后的几行内）
    const potentialTitleLines = lines.slice(1, 5); // 检查前5行
    for (const line of potentialTitleLines) {
      // 职位通常较短，不包含特殊字符，且不是联系信息
      if (line.length < 50 && !/[@:\/\(\)]/.test(line) && !line.includes('联系') && !line.includes('电话') && !line.includes('邮箱')) {
        if (line !== result.name) { // 确保不是重复的姓名
          result.title = line;
          break;
        }
      }
    }
    
    // 提取联系信息
    // 邮箱
    const emailRegex = /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g;
    const emailMatches = text.match(emailRegex);
    if (emailMatches && emailMatches.length > 0) {
      result.contact.email = emailMatches[0];
    }
    
    // 电话号码
    const phoneRegex = /(?:(?:\+|00)86)?1[3-9]\d{9}|(?:0\d{2,3}-?)?[1-9]\d{6,7}/g;
    const phoneMatches = text.match(phoneRegex);
    if (phoneMatches && phoneMatches.length > 0) {
      result.contact.phone = phoneMatches[0];
    }
    
    // 网站
    const websiteRegex = /https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_+.~#?&//=]*)/g;
    const websiteMatches = text.match(websiteRegex);
    if (websiteMatches && websiteMatches.length > 0) {
      // 排除GitHub链接
      const nonGithubLinks = websiteMatches.filter(link => !link.includes('github'));
      if (nonGithubLinks.length > 0) {
        result.contact.website = nonGithubLinks[0];
      }
    }
    
    // GitHub
    const githubRegex = /github\.com\/[a-zA-Z0-9_-]+/g;
    const githubMatches = text.match(githubRegex);
    if (githubMatches && githubMatches.length > 0) {
      result.contact.github = 'https://' + githubMatches[0];
    }
    
    // 提取技能
    // 查找"技能"、"专业技能"、"技术栈"等部分
    const skillsSection = findSection(text, ['技能', '专业技能', '技术栈', '专业技术', 'skills', 'technical skills']);
    
    if (skillsSection) {
      // 分割技能文本并清理
      const skillLines = skillsSection.split(/[,，、;；\n]+/);
      const skills = skillLines.map(skill => skill.trim())
        .filter(skill => skill.length > 0 && skill.length < 50); // 过滤掉空行和过长的行
      
      result.skills = skills;
    } else {
      // 如果没有找到技能部分，尝试从全文中提取常见技能关键词
      const commonSkills = [
        'JavaScript', 'TypeScript', 'Python', 'Java', 'PHP', 'Ruby', 'Swift',
        'React', 'Vue', 'Angular', 'Node.js', 'Express', 'Django', 'Flask', 'Spring',
        'HTML', 'CSS', 'SASS', 'LESS', 'Bootstrap', 'Tailwind',
        'SQL', 'MySQL', 'PostgreSQL', 'MongoDB', 'Redis', 'Oracle',
        'AWS', 'Azure', 'GCP', 'Docker', 'Kubernetes', 'CI/CD',
        'Git', 'SVN', 'Agile', 'Scrum', 'Jira', 'TDD', 'BDD'
      ];
      
      // 特殊处理包含特殊字符的技能
      const specialSkills = ['C++', 'C#'];
      
      // 先检查普通技能
      const foundSkills = commonSkills.filter(skill =>
        new RegExp(`\\b${skill}\\b`, 'i').test(text)
      );
      
      // 再检查特殊技能
      const foundSpecialSkills = [];
      if (text.includes('C++')) foundSpecialSkills.push('C++');
      if (text.includes('C#')) foundSpecialSkills.push('C#');
      
      // 合并结果
      result.skills = [...foundSkills, ...foundSpecialSkills];
    }
    
    console.log('简历分析完成:', result);
    return result;
  };
  
  // 在文本中查找特定部分
  const findSection = (text, sectionNames) => {
    if (!text) return '';
    
    // 将文本按行分割
    const lines = text.split(/\r?\n/);
    let sectionStart = -1;
    let sectionEnd = -1;
    
    // 查找部分的开始
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim().toLowerCase();
      if (sectionNames.some(name => line.includes(name.toLowerCase()))) {
        sectionStart = i;
        break;
      }
    }
    
    if (sectionStart === -1) return ''; // 没有找到部分
    
    // 查找部分的结束（下一个看起来像标题的行）
    for (let i = sectionStart + 1; i < lines.length; i++) {
      const line = lines[i].trim();
      // 标题通常较短，可能全部大写或以冒号结尾
      if (
        (line.length < 30 && /^[A-Z\s\u4e00-\u9fa5]+$/.test(line)) || // 全大写或中文
        line.endsWith(':') || line.endsWith('：') || // 以冒号结尾
        /^[A-Z\u4e00-\u9fa5][a-z\u4e00-\u9fa5]*\s*[&\/\|]\s*[A-Z\u4e00-\u9fa5]/.test(line) // 标题格式如"Education & Experience"
      ) {
        sectionEnd = i;
        break;
      }
    }
    
    if (sectionEnd === -1) sectionEnd = lines.length; // 如果没有找到结束，使用文本末尾
    
    // 提取部分文本
    const sectionText = lines.slice(sectionStart + 1, sectionEnd).join('\n');
    
    // 清理文本（移除部分名称等）
    let cleanedText = sectionText;
    
    // 移除第一行（可能是标题）
    const sectionLines = sectionText.split(/\r?\n/);
    if (sectionLines.length > 1) {
      // 检查第一行是否包含部分名称
      const firstLine = sectionLines[0].toLowerCase();
      if (sectionNames.some(name => firstLine.includes(name.toLowerCase()))) {
        cleanedText = sectionLines.slice(1).join('\n').trim();
      }
    }
    
    return cleanedText || sectionText; // 如果清理后为空，返回原文本
  };

  return (
    <div className="bg-white rounded-lg shadow-lg p-6">
      <h2 className="text-2xl font-bold mb-4">PDF简历解析测试</h2>
      
      {/* 文件上传区域 */}
      <div className="mb-6">
        <label
          htmlFor="pdfUpload"
          className="block w-full p-4 text-center border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-indigo-500 transition-colors"
        >
          <span className="text-gray-600">
            {isProcessing ? '正在处理...' : '点击或拖拽PDF文件到这里'}
          </span>
          <input
            ref={fileInputRef}
            type="file"
            id="pdfUpload"
            accept=".pdf"
            className="hidden"
            onChange={handleFileUpload}
            disabled={isProcessing}
          />
        </label>
        {uploadError && (
          <p className="mt-2 text-red-500">{uploadError}</p>
        )}
      </div>
      
      {/* PDF预览区域 - 使用canvas预览，支持分页 */}
      {pdfInfo.fileName && pdfInfo.previewUrls.length > 0 && (
        <div className="mb-6 p-4 bg-gray-50 rounded-lg">
          <h3 className="font-semibold mb-2">PDF预览</h3>
          <div className="border border-gray-300 rounded">
            <img 
              src={pdfInfo.previewUrls[pdfInfo.currentPage - 1]} 
              alt={`PDF预览第${pdfInfo.currentPage}页`} 
              className="max-w-full h-auto"
            />
          </div>
          
          {/* 分页控制区 */}
          <div className="flex items-center justify-between mt-2">
            <p className="text-sm text-gray-500">显示第{pdfInfo.currentPage}页 (共{pdfInfo.pageCount}页)</p>
            
            <div className="flex space-x-2">
              <button 
                onClick={() => changePage(1)} 
                disabled={pdfInfo.currentPage === 1}
                className={`px-2 py-1 text-xs rounded ${pdfInfo.currentPage === 1 ? 'bg-gray-200 text-gray-500' : 'bg-blue-500 text-white hover:bg-blue-600'}`}
              >
                首页
              </button>
              <button 
                onClick={() => changePage(pdfInfo.currentPage - 1)} 
                disabled={pdfInfo.currentPage === 1}
                className={`px-2 py-1 text-xs rounded ${pdfInfo.currentPage === 1 ? 'bg-gray-200 text-gray-500' : 'bg-blue-500 text-white hover:bg-blue-600'}`}
              >
                上一页
              </button>
              <button 
                onClick={() => changePage(pdfInfo.currentPage + 1)} 
                disabled={pdfInfo.currentPage === pdfInfo.pageCount}
                className={`px-2 py-1 text-xs rounded ${pdfInfo.currentPage === pdfInfo.pageCount ? 'bg-gray-200 text-gray-500' : 'bg-blue-500 text-white hover:bg-blue-600'}`}
              >
                下一页
              </button>
              <button 
                onClick={() => changePage(pdfInfo.pageCount)} 
                disabled={pdfInfo.currentPage === pdfInfo.pageCount}
                className={`px-2 py-1 text-xs rounded ${pdfInfo.currentPage === pdfInfo.pageCount ? 'bg-gray-200 text-gray-500' : 'bg-blue-500 text-white hover:bg-blue-600'}`}
              >
                尾页
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* 解析结果显示区域 */}
      {pdfInfo.fileName && (
        <div className="space-y-4">
          <div className="p-4 bg-gray-50 rounded-lg">
            <h3 className="font-semibold mb-2">基本信息</h3>
            <p>文件名：{pdfInfo.fileName}</p>
            <p>页数：{pdfInfo.pageCount}</p>
            <p>处理时间：{pdfInfo.processingTime}秒</p>
          </div>
          
          {pdfInfo.parsedData && (
            <div className="p-4 bg-gray-50 rounded-lg">
              <h3 className="font-semibold mb-2">结构化数据</h3>
              <div className="space-y-2">
                <p>姓名：{pdfInfo.parsedData.name || '未检测到'}</p>
                <p>职位：{pdfInfo.parsedData.title || '未检测到'}</p>
                
                <div>
                  <p className="font-medium">联系方式：</p>
                  <ul className="ml-4">
                    <li>邮箱：{pdfInfo.parsedData.contact.email || '未检测到'}</li>
                    <li>电话：{pdfInfo.parsedData.contact.phone || '未检测到'}</li>
                    <li>网站：{pdfInfo.parsedData.contact.website || '未检测到'}</li>
                    <li>GitHub：{pdfInfo.parsedData.contact.github || '未检测到'}</li>
                  </ul>
                </div>
                
                <div>
                  <p className="font-medium">技能：</p>
                  <ul className="ml-4">
                    {pdfInfo.parsedData.skills.length > 0 ? (
                      pdfInfo.parsedData.skills.map((skill, index) => (
                        <li key={index}>{skill}</li>
                      ))
                    ) : (
                      <li>未检测到技能</li>
                    )}
                  </ul>
                </div>
              </div>
            </div>
          )}
          
          {/* 原始文本显示区域 - 支持分页显示 */}
          <div className="p-4 bg-gray-50 rounded-lg">
            <h3 className="font-semibold mb-2">原始文本</h3>
            
            {/* OCR处理状态 */}
            {pdfInfo.ocrProcessing && (
              <div className="mb-3 p-3 bg-blue-50 border border-blue-200 rounded-md">
                <p className="text-blue-700 text-sm font-semibold">正在使用OCR处理PDF文件...</p>
                <div className="w-full bg-gray-200 rounded-full h-2.5 mt-2">
                  <div className="bg-blue-600 h-2.5 rounded-full" style={{ width: `${pdfInfo.ocrProgress}%` }}></div>
                </div>
                <p className="text-blue-600 text-xs mt-1 text-right">{pdfInfo.ocrProgress}%</p>
              </div>
            )}
            
            {/* 文本提取状态提示 */}
            {!pdfInfo.textExtractionSuccess && !pdfInfo.ocrProcessing && pdfInfo.extractedText && (
              <div className="mb-3 p-3 bg-yellow-50 border border-yellow-200 rounded-md">
                <p className="text-yellow-700 text-sm">
                  <span className="font-bold">注意：</span> 
                  {pdfInfo.ocrComplete ? 
                    'OCR处理已完成，但未能提取到足够的文本。这可能是因为图像质量较低或文本内容较少。' :
                    pdfInfo.hasImages ? 
                      '该PDF文件可能是扫描件或图像形式，无法直接提取文本。' : 
                      '无法从该PDF文件中提取足够的文本。可能是加密的PDF文件或使用了特殊字体。'}
                </p>
              </div>
            )}
            
            {/* OCR成功提示 */}
            {pdfInfo.textExtractionSuccess && pdfInfo.ocrComplete && (
              <div className="mb-3 p-3 bg-green-50 border border-green-200 rounded-md">
                <p className="text-green-700 text-sm">
                  <span className="font-bold">成功：</span> 
                  OCR处理成功完成，已提取文本内容。
                </p>
              </div>
            )}
            
            {/* 文本分页切换器 */}
            {pdfInfo.textExtractionSuccess && Array.isArray(pdfInfo.textByPage) && pdfInfo.textByPage.length > 1 && (
              <div className="mb-2 flex items-center">
                <span className="text-sm text-gray-600 mr-2">显示页面:</span>
                <div className="flex space-x-1">
                  <button 
                    onClick={() => changePage(pdfInfo.currentPage)} 
                    className="px-2 py-1 text-xs rounded bg-blue-500 text-white hover:bg-blue-600"
                  >
                    当前页文本
                  </button>
                  <button 
                    onClick={toggleTextDisplayMode}
                    className={`px-2 py-1 text-xs rounded ${showAllText ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                  >
                    全部文本
                  </button>
                </div>
              </div>
            )}
            
            <div className="whitespace-pre-wrap break-words bg-white p-4 rounded border border-gray-200 max-h-96 overflow-y-auto">
                  ) : (
                    <li>未检测到技能</li>
                  )}
                </ul>
              </div>
            </div>
          </div>
        )}
        
        {/* 原始文本显示区域 - 支持分页显示 */}
        <div className="p-4 bg-gray-50 rounded-lg">
          <h3 className="font-semibold mb-2">原始文本</h3>
          
          {/* OCR处理状态 */}
          {pdfInfo.ocrProcessing && (
            <div className="mb-3 p-3 bg-blue-50 border border-blue-200 rounded-md">
              <p className="text-blue-700 text-sm font-semibold">正在使用OCR处理PDF文件...</p>
              <div className="w-full bg-gray-200 rounded-full h-2.5 mt-2">
                <div className="bg-blue-600 h-2.5 rounded-full" style={{ width: `${pdfInfo.ocrProgress}%` }}></div>
              </div>
              <p className="text-blue-600 text-xs mt-1 text-right">{pdfInfo.ocrProgress}%</p>
            </div>
          )}
          
          {/* 文本提取状态提示 */}
          {!pdfInfo.textExtractionSuccess && !pdfInfo.ocrProcessing && pdfInfo.extractedText && (
            <div className="mb-3 p-3 bg-yellow-50 border border-yellow-200 rounded-md">
              <p className="text-yellow-700 text-sm">
                <span className="font-bold">注意：</span> 
                {pdfInfo.ocrComplete ? 
                  'OCR处理已完成，但未能提取到足够的文本。这可能是因为图像质量较低或文本内容较少。' :
                  pdfInfo.hasImages ? 
                    '该PDF文件可能是扫描件或图像形式，无法直接提取文本。' : 
                    '无法从该PDF文件中提取足够的文本。可能是加密的PDF文件或使用了特殊字体。'}
              </p>
            </div>
          )}
          
          {/* OCR成功提示 */}
          {pdfInfo.textExtractionSuccess && pdfInfo.ocrComplete && (
            <div className="mb-3 p-3 bg-green-50 border border-green-200 rounded-md">
              <p className="text-green-700 text-sm">
                <span className="font-bold">成功：</span> 
                OCR处理成功完成，已提取文本内容。
              </p>
            </div>
          )}
          
          {/* 文本分页切换器 */}
          {pdfInfo.textExtractionSuccess && Array.isArray(pdfInfo.textByPage) && pdfInfo.textByPage.length > 1 && (
            <div className="mb-2 flex items-center">
              <span className="text-sm text-gray-600 mr-2">显示页面:</span>
              <div className="flex space-x-1">
                <button 
                  onClick={() => changePage(pdfInfo.currentPage)} 
                  className="px-2 py-1 text-xs rounded bg-blue-500 text-white hover:bg-blue-600"
                >
                  当前页文本
                </button>
                <button 
                  onClick={toggleTextDisplayMode}
                  className={`px-2 py-1 text-xs rounded ${showAllText ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                >
                  全部文本
                </button>
              </div>
            </div>
          )}
          
          <div className="whitespace-pre-wrap break-words bg-white p-4 rounded border border-gray-200 max-h-96 overflow-y-auto">
            {pdfInfo.extractedText && pdfInfo.extractedText.length > 0 ? (
              <>
                <p className="text-gray-500 mb-2">文本长度: {pdfInfo.extractedText.length} 字符</p>
                
                {/* 根据显示模式选择显示内容 */}
                {pdfInfo.textExtractionSuccess && showAllText ? (
                  <div>
                    <p className="text-blue-600 text-sm mb-2">显示全部文本</p>
                    <div dangerouslySetInnerHTML={{ __html: pdfInfo.extractedText.replace(/\n/g, '<br/>') }} />
                  </div>
                ) : pdfInfo.textExtractionSuccess && Array.isArray(pdfInfo.textByPage) && pdfInfo.textByPage.length > 0 && pdfInfo.currentPage <= pdfInfo.textByPage.length ? (
                  <div>
                    <p className="text-blue-600 text-sm mb-2">当前显示第 {pdfInfo.currentPage} 页文本</p>
                    <div dangerouslySetInnerHTML={{ __html: pdfInfo.textByPage[pdfInfo.currentPage - 1].replace(/\n/g, '<br/>') }} />
                  </div>
                ) : (
                  <div dangerouslySetInnerHTML={{ __html: pdfInfo.extractedText.replace(/\n/g, '<br/>') }} />
                )}
              </>
            ) : '无文本内容'}
          </div>
        </div>
      </div>
    )}
  </div>
);
    </div>
  );
};

export default PdfTestPage;